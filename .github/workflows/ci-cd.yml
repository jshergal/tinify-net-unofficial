name: CI_CD

on:
  workflow_dispatch:

  push:
    paths-ignore:
    - "**/*.md"
    - "**/*.gitignore"
    - "**/*.gitattributes"

  pull_request:
    branches:
      - main

  release:
    types:
      - published

env:
  # more info on dotnet cli environment variables here: https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-environment-variables
  # Disable sending usage data to Microsoft
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  # Disable welcome message on dotnet CLI first run
  DOTNET_NOLOGO: true
  # Disable redundant package caching
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

jobs:
  build_and_test:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up dotnet 
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: |
         3.1.x
         6.0.x

    - uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Install dependencies
      run: |
        dotnet restore

    - name: Build
      run: |
        dotnet build --configuration Release --version-suffix "-prerelease.$GITHUB_RUN_ID" --no-restore

    - name: Run tests on mac and linux
      if: ${{ !startsWith(matrix.os, 'windows') }}
      env:
        TINIFY_KEY: ${{ secrets.TINIFY_KEY }}
      run: |
        dotnet test --configuration Release --no-build --verbosity normal --framework netcoreapp3.1
        dotnet test --configuration Release --no-build --verbosity normal --framework net5.0
        dotnet test --configuration Release --no-build --verbosity normal --framework net6.0

    - name: Run tests on windows
      if: startsWith(matrix.os, 'windows')
      env:
        TINIFY_KEY: ${{ secrets.TINIFY_KEY }}
      run: |
        dotnet test --configuration Release --no-build --verbosity normal
        
  deploy:
    needs: build_and_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up dotnet 
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 6.0.x

      - name: Create Release NuGet package
        if: github.event_name == 'release'
        run: |
          arrTag=(${GITHUB_REF//\// })
          VERSION="${arrTag[2]}"
          VERSION="${VERSION//v}"
          echo Clean Version: $VERSION
          dotnet pack src/Tinify/Tinify.csproj -v normal -c Release --include-symbols --include-source -p:PackageVersion=$VERSION -o .

      - name: Create pre-release NuGet package
        if: github.event_name != 'release'
        run: |
          dotnet pack src/Tinify/Tinify.csproj --version-suffix "-prerelease.$GITHUB_RUN_ID" -v normal -c Release --include-symbols --include-source  -o .
          
      - name: Push to Nuget
        run: |
          dotnet nuget push *.nupkg --skip-duplicate -s https://api.nuget.org/v3/index.json --api-key ${{secrets.NUGET_API_KEY}}
